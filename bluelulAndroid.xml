<template name="btnclick" value="$button$.setOnClickListener(new View.OnClickListener() {&#10;    @Override&#10;    public void onClick(View v) {&#10;        $action$&#10;    }&#10;});" description="Set OnClick Listener to button" toReformat="false" toShortenFQNames="true">
  <variable name="button" expression="" defaultValue="&quot;button&quot;" alwaysStopAt="true" />
  <variable name="action" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="btnclickquick" value="this.findViewById(R.id.$button$).setOnClickListener(v -&gt; {&#10;    $action$&#10;});" description="Catch button click without declaration + use lambda" toReformat="true" toShortenFQNames="true">
  <variable name="button" expression="" defaultValue="&quot;button&quot;" alwaysStopAt="true" />
  <variable name="action" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="call" value="Intent intentCall = new Intent(Intent.ACTION_DIAL, Uri.parse(&quot;tel:&quot; + &quot;$phone$&quot;));&#10;if (intentCall.resolveActivity(getPackageManager()) != null) {&#10;    startActivity(intentCall);&#10;} else {&#10;    Toast.makeText(this, &quot;$error$&quot;&#10;            , Toast.LENGTH_SHORT).show();&#10;}" description="Make a call to a phone number" toReformat="true" toShortenFQNames="true">
  <variable name="phone" expression="" defaultValue="&quot;0123456789&quot;" alwaysStopAt="true" />
  <variable name="error" expression="" defaultValue="&quot;Phone call is not supported on this device&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="clipcopytext" value="ClipData clipData = ClipData.newPlainText(&quot;clipboard&quot;, &quot;$text$&quot;);&#10;clipMan.setPrimaryClip(clipData);" description="Copy plain text to clipboard" toReformat="true" toShortenFQNames="true">
  <variable name="text" expression="" defaultValue="&quot;string to copy&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="clipman" value="ClipboardManager clipMan = (ClipboardManager) this.getSystemService(Context.CLIPBOARD_SERVICE);" description="Declare ClipboardManager object" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="clippastetext" value="ClipData primaryClipData = clipMan.getPrimaryClip();&#10;String $paste$ = primaryClipData.getItemAt(0).getText().toString();" description="Paste plain text in clipboard" toReformat="true" toShortenFQNames="true">
  <variable name="paste" expression="" defaultValue="&quot;pasteText&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="const" value="public static final " description="public static final" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="find" value="$Class$ $object$ = this.findViewById(R.id.$viewID$);" description="findViewById extended" toReformat="true" toShortenFQNames="true">
  <variable name="Class" expression="" defaultValue="&quot;Class&quot;" alwaysStopAt="true" />
  <variable name="object" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
  <variable name="viewID" expression="" defaultValue="&quot;viewID&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="findquick" value="findViewById(R.id.$viewID$)" description="findViewById without declaring new object" toReformat="true" toShortenFQNames="true">
  <variable name="viewID" expression="" defaultValue="&quot;viewID&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="loadintent" value="Intent intent = getIntent();&#10;String $val$ = intent.getStringExtra(&quot;$arg$&quot;);" description="Load input argument of activity after being created" toReformat="true" toShortenFQNames="true">
  <variable name="val" expression="" defaultValue="&quot;val&quot;" alwaysStopAt="true" />
  <variable name="arg" expression="" defaultValue="&quot;arg&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="mail" value="Intent intentMail = new Intent(Intent.ACTION_SENDTO, Uri.parse(&quot;mailto:&quot;));&#10;intentMail.putExtra(Intent.EXTRA_EMAIL, new String[]{&quot;$mail$&quot;});&#10;intentMail.putExtra(Intent.EXTRA_SUBJECT, &quot;$subject$&quot;);&#10;intentMail.putExtra(Intent.EXTRA_TEXT, &quot;$body$&quot;);&#10;if (intentMail.resolveActivity(getPackageManager()) != null) {&#10;    startActivity(intentMail);&#10;} else {&#10;    Toast.makeText(this, &quot;$error$&quot;&#10;            , Toast.LENGTH_SHORT).show();&#10;}" description="Compose email" toReformat="true" toShortenFQNames="true">
  <variable name="mail" expression="" defaultValue="&quot;bluelul.email@gmail.com&quot;" alwaysStopAt="true" />
  <variable name="subject" expression="" defaultValue="&quot;Welcome to Android World&quot;" alwaysStopAt="true" />
  <variable name="body" expression="" defaultValue="&quot;Hi there,&quot;" alwaysStopAt="true" />
  <variable name="error" expression="" defaultValue="&quot;Email composing is not supported on this device&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="sms" value="Uri uri = Uri.parse(&quot;sms&quot; + &quot;to:&quot; + &quot;$phone$&quot;);&#10;Intent intentSms = new Intent(Intent.ACTION_SENDTO, uri);&#10;intentSms.putExtra(&quot;sms_body&quot;, &quot;$content$&quot;);&#10;if (intentSms.resolveActivity(getPackageManager()) != null) {&#10;    startActivity(intentSms);&#10;} else {&#10;    Toast.makeText(this, &quot;$error$&quot;&#10;            , Toast.LENGTH_SHORT).show();&#10;}" description="Compose SMS to a phone number" toReformat="true" toShortenFQNames="true">
  <variable name="phone" expression="" defaultValue="&quot;0123456789&quot;" alwaysStopAt="true" />
  <variable name="content" expression="" defaultValue="&quot;sms content&quot;" alwaysStopAt="true" />
  <variable name="error" expression="" defaultValue="&quot;SMS texting is not supported on this device&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="snack" value="View baseView = this.findViewById(android.R.id.content);&#10;Snackbar.make(baseView, &quot;$message$&quot;, Snackbar.LENGTH_LONG)&#10;        .setAction(&quot;$btn$&quot;, vs -&gt; {&#10;            Snackbar.make(baseView, &quot;$btn_mes$&quot;, Snackbar.LENGTH_SHORT)&#10;                    .show();&#10;        })&#10;        .show();" description="Make  snackbar with button" toReformat="true" toShortenFQNames="true">
  <variable name="message" expression="" defaultValue="&quot;snackbar message&quot;" alwaysStopAt="true" />
  <variable name="btn" expression="" defaultValue="&quot;BTN&quot;" alwaysStopAt="true" />
  <variable name="btn_mes" expression="" defaultValue="&quot;btn clicked&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="snacktext" value="View baseView = this.findViewById(android.R.id.content);&#10;Snackbar.make(baseView, &quot;$message$&quot;, Snackbar.LENGTH_LONG)&#10;        .show();" description="Make only-text snackbar" toReformat="true" toShortenFQNames="true">
  <variable name="message" expression="" defaultValue="&quot;message&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="swact" value="Intent intent = new Intent(this, $NextActivity$.class);&#10;intent.putExtra(&quot;$argStr$&quot;, &quot;$valStr$&quot;);&#10;startActivity(intent);" description="Call another activity from current activity" toReformat="true" toShortenFQNames="true">
  <variable name="NextActivity" expression="" defaultValue="&quot;NextActivity&quot;" alwaysStopAt="true" />
  <variable name="argStr" expression="" defaultValue="&quot;argStr&quot;" alwaysStopAt="true" />
  <variable name="valStr" expression="" defaultValue="&quot;valStr&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="textchangewatch" value="$editText$.addTextChangedListener(new TextWatcher() {&#10;    @Override&#10;    public void beforeTextChanged(CharSequence s, int start, int count, int after) {&#10;        $before$&#10;    }&#10;    &#10;    @Override&#10;    public void onTextChanged(CharSequence s, int start, int before, int count) {&#10;        $on$&#10;    }&#10;    &#10;    @Override&#10;    public void afterTextChanged(Editable s) {&#10;        $after$&#10;    }&#10;});" description="Handle EditText changes" toReformat="true" toShortenFQNames="true">
  <variable name="editText" expression="" defaultValue="&quot;editText&quot;" alwaysStopAt="true" />
  <variable name="before" expression="" defaultValue="" alwaysStopAt="true" />
  <variable name="on" expression="" defaultValue="" alwaysStopAt="true" />
  <variable name="after" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="toast" value="Toast.makeText(this, &quot;$content$&quot;, Toast.LENGTH_SHORT).show();" description="Make new toast" toReformat="true" toShortenFQNames="true">
  <variable name="content" expression="" defaultValue="&quot;content&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>
<template name="web" value="Intent intentWeb = new Intent(Intent.ACTION_VIEW, Uri.parse(&quot;$url$&quot;));&#10;if (intentWeb.resolveActivity(getPackageManager()) != null) {&#10;    startActivity(intentWeb);&#10;} else {&#10;    Toast.makeText(this, &quot;$error$&quot;&#10;            , Toast.LENGTH_SHORT).show();&#10;}" description="Browse a website" toReformat="true" toShortenFQNames="true">
  <variable name="url" expression="" defaultValue="&quot;https://google.com&quot;" alwaysStopAt="true" />
  <variable name="error" expression="" defaultValue="&quot;Web browser is not supported on this device&quot;" alwaysStopAt="true" />
  <context>
    <option name="JAVA_DECLARATION" value="true" />
    <option name="JAVA_STATEMENT" value="true" />
  </context>
</template>